name: Preview publish package - 02 - Update status comment on success
description: Once the package is published, this workflow updates the status created in 00-create-status

inputs:
  GH_TOKEN:
    description: A GitHub PAT
    required: true
  prRef:
    description: Pull request reference, e.g. `github.event.pull_request.head.ref`
    required: true

runs:
  using: composite
  steps:
    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.GH_TOKEN }}
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref }}

    - name: Download Artifact
      uses: actions/download-artifact@v4
      with:
        path: ./

    - name: Read artifacts
      run: |
        echo "comment_id=$(cat ./comment-artifact/comment_id.txt)" >> $GITHUB_ENV
        echo "changelog=$(cat ./changelog-artifact/changelog.json)" >> $GITHUB_ENV
      shell: bash

    - name: Update status comment
      uses: actions/github-script@v7
      with:
        script: |
          const comment_id = ${{ env.comment_id }}
          const changedPackages = ${{ env.changelog }};
          
          if(!changedPackages || changedPackages.length === 0){
            github.rest.issues.updateComment({
              ...context.repo,
              comment_id: comment_id,
              body: `> [!CAUTION]
          > Pre-Release failed

          Check logs for more details.
              `
            });

            return;
          }          
          
          const exileWatchBuildToolsPackages = ['rollup', 'typescript', 'postcss', 'conventional-changelog', lefthook', 'unit-testing', 'biome']
          const packageInstallCommandFormat = (c) => {            
            const isDevDependency = exileWatchBuildToolsPackages.includes(c.name) ? ' -D ' : ' ';
            return `\`npm i${isDevDependency}${c.name}@${c.version}\``
          }
          const multiPackageInstallCommandFormat = (c) => {            
            const isDevDependency = exileWatchBuildToolsPackages.includes(c.name) ? ' -D ' : ' ';
            return `\`npm i${isDevDependency}${c.name}@${c.version}\``
          }
          const singlePkgChangelog = changedPackages.length === 1 && changedPackages?.map(packageInstallCommandFormat);
          const multiPkgChangelog = changedPackages.length > 1 && changedPackages?.map(multiPackageInstallCommandFormat);
          const moreThanOnePackage = changelog?.length > 0          
          
          const defaultBody = `          
            You can now install the recently published package by copying following command:
            ${singlePkgChangelog}        
          `
          
          const multiPkgBody = `
            You can now:
          
            1. Install the recently published packages one by one by copying following command(s):
            ${singlePkgChangelog}
          
            2. Install all packages at once by copying following command:
            ${multiPkgChangelog}
          `         
          
          const changelog = changedPackages.length === 1 ? defaultBody : multiPkgBody;

          github.rest.issues.updateComment({
            ...context.repo,
            comment_id: comment_id,
            body: `
            > [!TIP]
            > The pre-release has been successfully created
          
            ${changelog}
            
            ###### âš¡Powered by [`@exile-watch/doryani/preview-publish-package`](https://docs.exile.watch/projects/doryani/actions/preview-publish-package)
            `
          });